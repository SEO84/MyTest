import java.awt.BorderLayout;
import java.awt.Cursor;
import java.awt.FlowLayout;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;

public class WordTestLsy1205Test extends JFrame {
    private JTextField wordField;
    private JTextField meaningField;
    private JPanel wordPanel;

    private Map<String, JLabel> wordLabelMap;
    private Map<String, String> wordMeaningLabelMap;
    private Random random;

    public WordTestLsy1205Test() {
        setTitle("단어 프로그램 V 1.0.0");
        setSize(600, 300);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        wordLabelMap = new HashMap<>();
        wordMeaningLabelMap = new HashMap<>();
        random = new Random();

        setLayout(new BorderLayout());

        JPanel inputPanel = new JPanel();
        inputPanel.setLayout(new FlowLayout());

        inputPanel.add(new JLabel("단어: "));
        wordField = new JTextField(10);
        inputPanel.add(wordField);

        inputPanel.add(new JLabel("뜻: "));
        meaningField = new JTextField(10);
        inputPanel.add(meaningField);

        JButton addButton = new JButton("단어추가");
        inputPanel.add(addButton);

        JButton randomButton = new JButton("랜덤 단어 뽑기");
        inputPanel.add(randomButton);

        // Save button
        JButton saveButton = new JButton("저장하기");
        inputPanel.add(saveButton);

        // Load button
        JButton loadButton = new JButton("불러오기");
        inputPanel.add(loadButton);

        wordPanel = new JPanel();
        wordPanel.setLayout(new FlowLayout());

        add(inputPanel, BorderLayout.NORTH);
        add(wordPanel, BorderLayout.CENTER);

        addButton.addActionListener(e -> addWord());
        randomButton.addActionListener(e -> showRandomWord());
        saveButton.addActionListener(e -> saveWordsToFile());
        loadButton.addActionListener(e -> loadWordsFromFile());

        setVisible(true);
    }

    private void addWord() {
        String word = wordField.getText();
        String meaning = meaningField.getText();

        if (!word.isEmpty() && !meaning.isEmpty()) {
            JLabel wordLabel = new JLabel(word);
            wordLabel.setCursor(new Cursor(Cursor.HAND_CURSOR));

            wordLabel.addMouseListener(new MouseAdapter() {
                private boolean showMeaning = false;

                @Override
                public void mouseClicked(MouseEvent e) {
                    if (!showMeaning) {
                        wordLabel.setText("뜻 : " + meaning);
                        showMeaning = true;
                    } else {
                        wordLabel.setText(word);
                        showMeaning = false;
                    }
                }
            });

            wordLabelMap.put(word, wordLabel);
            wordMeaningLabelMap.put(word, meaning);

            wordPanel.add(wordLabel);
            wordPanel.revalidate();
            wordPanel.repaint();
        } else {
            JOptionPane.showMessageDialog(null, "단어와 뜻을 모두 입력해주세요.",
                    "입력오류: 모두 입력해주세요", JOptionPane.ERROR_MESSAGE);
        }
    }

    public void showRandomWord() {
        if (wordLabelMap.isEmpty()) {
            JOptionPane.showMessageDialog(null, "단어가 입력 안됨",
                    "먼저, 단어를 추가해주세요", JOptionPane.ERROR_MESSAGE);
            return;
        }

        for (JLabel jLabel : wordLabelMap.values()) {
            jLabel.setVisible(false);
        }

        List<String> words = new ArrayList<>(wordLabelMap.keySet());
        String randomWord = words.get(random.nextInt(words.size()));
        wordLabelMap.get(randomWord).setVisible(true);
    }

    // Save words to file
    private void saveWordsToFile() {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter("wordTest.txt"))) {
            for (Map.Entry<String, String> entry : wordMeaningLabelMap.entrySet()) {
                writer.write(entry.getKey() + ":" + entry.getValue());
                writer.newLine();
            }
            JOptionPane.showMessageDialog(null, "단어가 저장되었습니다!", "저장 완료", JOptionPane.INFORMATION_MESSAGE);
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "파일 저장 중 오류가 발생했습니다.", "저장 오류", JOptionPane.ERROR_MESSAGE);
        }
    }

    // Load words from CSV file
    private void loadWordsFromFile() {
        try (BufferedReader reader = new BufferedReader(new FileReader("wordTestCsv.csv"))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] words = line.split(",");
                for (int i = 0; i < words.length; i += 2) {
                    String word = words[i];
                    String meaning = words[i + 1];
                    wordMeaningLabelMap.put(word, meaning);

                    JLabel wordLabel = new JLabel(word);
                    wordLabel.setCursor(new Cursor(Cursor.HAND_CURSOR));
                    wordLabel.addMouseListener(new MouseAdapter() {
                        private boolean showMeaning = false;

                        @Override
                        public void mouseClicked(MouseEvent e) {
                            if (!showMeaning) {
                                wordLabel.setText("뜻 : " + meaning);
                                showMeaning = true;
                            } else {
                                wordLabel.setText(word);
                                showMeaning = false;
                            }
                        }
                    });
                    wordLabelMap.put(word, wordLabel);
                    wordPanel.add(wordLabel);
                }
            }
            wordPanel.revalidate();
            wordPanel.repaint();
            JOptionPane.showMessageDialog(null, "단어가 불러와졌습니다!", "불러오기 완료", JOptionPane.INFORMATION_MESSAGE);
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "파일 불러오기 중 오류가 발생했습니다.", "불러오기 오류", JOptionPane.ERROR_MESSAGE);
        }
    }

    public static void main(String[] args) {
        new WordTestLsy1205Test();
    }
}